import React, { useState, useEffect } from 'react';
import ReactDOM from "react-dom/client";
import "./index.css";
import { RouterProvider, useLocation } from "react-router-dom";
import { Provider } from "react-redux";
import { store } from "./store/configureStore";
import { StrictMode } from "react";
import { Box, CssBaseline } from "@mui/material";
import { ToastContainer } from "react-toastify";
import { ThemeProvider } from "@mui/material/styles";
import rtlPlugin from "stylis-plugin-rtl";
import { prefixer } from "stylis";
import { CacheProvider } from "@emotion/react";
import createCache from "@emotion/cache";
import { theme } from "./theme";
import * as serviceWorkerRegistration from "./serviceWorkerResgistration";
import SplashScreenBox from './SplashScreenBox';
import { Helmet } from 'react-helmet';
import Header from './components/Header';
import { router } from "./router/Routes";
import { BrowserRouter } from 'react-router-dom';
import BottomMenu from './features/private/bottomMenu/BottomMenu'; // منوی پایین

const cacheRtl = createCache({
  key: "muirtl",
  stylisPlugins: [prefixer, rtlPlugin],
});
serviceWorkerRegistration.unregister();

function App() {
  const [showSplash, setShowSplash] = useState(true);
  const location = useLocation();
  const isCPPage = window.location.pathname.startsWith('/cp');

  const [showProfile, setShowProfile] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [showServices, setShowServices] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  const handleProfileClick = () => setShowProfile(true);
  const handleHistoryClick = () => setShowHistory(true);
  const handleServicesClick = () => setShowServices(true);
  const handleSettingsClick = () => setShowSettings(true);

  useEffect(() => {
    const hasVisited = localStorage.getItem('hasVisited');
    if (!hasVisited) {
      setTimeout(() => {
        setShowSplash(false);
        localStorage.setItem('hasVisited', true);
      }, 3000);
    } else {
      setShowSplash(false);
    }
  }, []);

  return (
    
    <StrictMode>
      <Provider store={store}>
        <CacheProvider value={cacheRtl}>
          <ThemeProvider theme={theme}>
            <Box component="div" dir="rtl" sx={{ display: "flex", flexDirection: "column", maxHeight: '100vh' }}>
              <CssBaseline />
              {!showSplash && <Header />}

              {showSplash ? (
                <SplashScreenBox />
              ) : (
                <>
               
                
                {/* نمایش BottomMenu فقط در صفحاتی که زیرمجموعه‌ی /cp هستند */}
                {isCPPage &&(
                  <BottomMenu
                    showSettings={showSettings}
                    setShowSettings={setShowSettings}
                    onProfileClick={handleProfileClick}
                    onHistoryClick={handleHistoryClick}
                    onServicesClick={handleServicesClick}
                    onSettingsClick={handleSettingsClick}
                  />
                )}
              </>
              )}
              <ToastContainer
                position="top-center"
                rtl
                hideProgressBar
                theme="colored"
              />
            </Box>
          </ThemeProvider>
        </CacheProvider>
      </Provider>
    </StrictMode>
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);
